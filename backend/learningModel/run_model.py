# -*- coding: utf-8 -*-
"""run_model.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/11z-ZWMNEE90_X3CH0bsm_FO_s3npgfua
"""

import pandas as pd
import numpy as np
import re
import string
import nltk # Natural language processing
from nltk.corpus import stopwords
from nltk.stem import PorterStemmer
from sklearn.model_selection import train_test_split
from sklearn.metrics import classification_report
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.naive_bayes import MultinomialNB
import warnings
warnings.filterwarnings('ignore')
import pickle
import sys

import os
from os.path import dirname, join, realpath

import joblib

import uvicorn
from fastapi import FastAPI 
from fastapi.middleware.cors import CORSMiddleware

# Downloading NLTK data
   # Downloading stopwords
nltk.download('stopwords', download_dir='pre_download')
# nltk.download('punkt')       # Downloading tokenizer

# !pip install joblib

# Set FastAPI
app = FastAPI(
    title="Sentiment Model API",
    description="A simple API that use NLP model to predict the scam message",
    version="0.1",
)

origins = ["*"]

app.add_middleware(
    CORSMiddleware,
    allow_origins=origins,
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)


# Load CountVectorizer and trained classification model

nltk_data_path = join(dirname(realpath(__file__)), 'pre_download')
nltk.data.path.append(nltk_data_path)

model_path = join(dirname(realpath(__file__)), 'spam_detect_model.pkl')

with open(model_path, 'rb') as f:
    cv, loaded_model = pickle.load(f)


"""# Feature engineering"""

ps = PorterStemmer()
# Define text preprocessing function - remove punctuation + stopwords
def processing_message(text):
  text = text.lower()
  ### Remove any punctuation
  text = ''.join([char for char in text if char not in string.punctuation])
  ### convert email address to word emailaddr
  cleaned = re.sub(r'\b[\w\-.]+?@\w+?\.\w{2,4}\b', 'emailaddr', text)
  ### convert URL to word httpaddr
  cleaned = re.sub(r'(http[s]?\S+)|(\w+\.[A-Za-z]{2,4}\S*)', 'httpaddr', cleaned)
  ### convert literal money symbol to word moneysymb
  cleaned = re.sub(r'Â£|\$', 'dollar', cleaned)
  ### convert phone number digits to word phonenumbr
  cleaned = re.sub(r'\b(\+\d{1,2}\s)?\d?[\-(.]?\d{3}\)?[\s.-]?\d{3}[\s.-]?\d{4}\b',
                    'phonenumbr', cleaned)
  ### convert numbers to word numbr
  cleaned = re.sub(r'\d+(\.\d+)?', 'numbr', cleaned)
  ### remove suffixes and stopwords
  cwc = [ps.stem(word) for word in cleaned.split() if word not in stopwords.words('english')]
  # join stemmed words
  cwc_joined = ' '.join(cwc)
  return cwc_joined

"""# Prediction testing"""

# sample message for testing
"[Update] Congratulations Nile Yogesh, You account is activated for investment in Stocks. Click to invest now: "

"Your Stock broker FALANA BROKING LIMITED reported your fund balance Rs.1500.5 & securities balance 0.0 as on end of MAY-20 . Balances do not cover your bank, DP & PMS balance with broking entity. Check details at YOGESHNILE.WORK4U@GMAIL.COM. If email Id not correct, kindly update with your broker."

"Hi! You are pre-qulified for Premium SBI Credit Card. Also get Rs.500 worth Amazon Gift Card*, 10X Rewards Point* & more. Click "

def msg_prediction(input):
  if isinstance(input, str):  # if is a single string
    inMsg = processing_message(input)
    in_vec = cv.transform([inMsg]).toarray()
    prediction = loaded_model.predict(in_vec)[0]
    result = "Careful! This is a spam message!" if prediction == 1 else "This looks like a normal message."
    return {"message": input, "prediction": result, "index":prediction}
  else:
     return {"error": "Input is not a single string. Please re-enter your message."}

@app.post("/detect")
def detect_scam(input: str):
  return msg_prediction(input)

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=3002)
    